generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  image     String?
  bio       String?
  location  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  aiResponse             AIResponse?
  businessIdeas          BusinessIdea[]
  posts                  Post[]
  comments               Comment[]
  sentMessages           Message[]       @relation("SentMessages")
  receivedMessages       Message[]       @relation("ReceivedMessages")
  sentCollaborations     Collaboration[] @relation("CollabRequester")
  receivedCollaborations Collaboration[] @relation("CollabReceiver")
  rewards                Reward[]
  userRoadmaps           UserRoadmap[]
  progress               UserProgress[]
  sessions               Session[]
  accounts               Account[]
}

model AIResponse {
  id        String   @id @default(cuid())
  userId    String   @unique
  content   Json
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id])
  roadmap Roadmap?
}

model Roadmap {
  id           String   @id @default(cuid())
  title        String
  description  String
  industry     String?
  tags         String[]
  createdAt    DateTime @default(now())
  aiResponseId String?  @unique

  steps         RoadmapStep[]
  userLinks     UserRoadmap[]
  aiResponse    AIResponse?    @relation(fields: [aiResponseId], references: [id])
  businessIdeas BusinessIdea[]
}

model BusinessIdea {
  id             String   @id @default(cuid())
  userId         String
  title          String
  suitability    String
  requiredSkills String[]
  tools          String[]
  domainTags     String[]
  roadmapId      String?
  createdAt      DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id])
  roadmap Roadmap? @relation(fields: [roadmapId], references: [id])
}

model RoadmapStep {
  id         String  @id @default(cuid())
  roadmapId  String
  stepNumber Int
  title      String
  content    String
  resources  String?

  roadmap      Roadmap        @relation(fields: [roadmapId], references: [id])
  userProgress UserProgress[]

  @@unique([roadmapId, stepNumber])
}

model UserRoadmap {
  id        String   @id @default(cuid())
  userId    String
  roadmapId String
  startedAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  roadmap Roadmap @relation(fields: [roadmapId], references: [id])
}

model UserProgress {
  id        String   @id @default(cuid())
  userId    String
  stepId    String
  status    String
  updatedAt DateTime @updatedAt

  user User        @relation(fields: [userId], references: [id])
  step RoadmapStep @relation(fields: [stepId], references: [id])
}

model Post {
  id        String   @id @default(cuid())
  userId    String
  title     String
  content   String
  imageUrl  String?
  createdAt DateTime @default(now())

  user     User      @relation(fields: [userId], references: [id])
  comments Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  content   String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
}

model Collaboration {
  id          String   @id @default(cuid())
  requesterId String
  receiverId  String
  status      String
  message     String?
  createdAt   DateTime @default(now())

  requester User @relation("CollabRequester", fields: [requesterId], references: [id])
  receiver  User @relation("CollabReceiver", fields: [receiverId], references: [id])
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  content    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  sender   User @relation("SentMessages", fields: [senderId], references: [id])
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model Reward {
  id        String   @id @default(cuid())
  userId    String
  title     String
  points    Int
  reason    String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String?
  url         String
  category    String
  createdAt   DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
